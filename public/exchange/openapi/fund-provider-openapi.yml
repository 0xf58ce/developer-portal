openapi: 3.0.3
info:
  title: Fund Provider Server
  version: '1.0'
paths:
  /capabilities:
    get:
      operationId: getCapabilities
      responses:
        '200':
          description: |
            ### Fund Provider Capabilities
            - "fiatCurrencyCapabilities.[].fiat": fiat currency supported at the ISO-4217 standard,
            - cryptoCurrencyCapabilities.[].id: The provider id of the currency, this id will be used to call quote endpoint and in the widget url query parameter,
            - cryptoCurrencyCapabilities.[].minAmount: Minimum amount of crypto the user can sell
            - cryptoCurrencyCapabilities.[].maxAmount: Maximum amount of crypto the user can sell
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundProviderCapabilities'
              example:
                fiatCurrencyCapabilities:
                  - fiat: EUR
                  - fiat: USD
                  - fiat: GBP
                cryptoCurrencyCapabilities:
                  - id: BTC
                    minAmount: 0.01
                    maxAmount: 0.5
        default:
          description: Error sent by the provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
              example:
                code: 400
                message: Server isn't able to handle the request because of whatever.
  /quote:
    get:
      operationId: getQuote
      parameters:
        - name: from
          in: query
          description: Crypto currency at the ledgerId format.
          required: true
          schema:
            type: string
          example: bitcoin
        - name: to
          in: query
          description: Fiat currency at the ISO-4217 standard.
          required: true
          schema:
            type: string
          example: EUR
        - name: payment-method
          in: query
          description: |
            Payment method, valid values : visa, mastercard, creditcard,
            pix, mobikwik, easypay, astropay, upibanktransfer, sofort, bancontact, giropay,
            maestro, googlepay, applepay, paypal, sepa, ach, fasterpayments, easybank,
            bank, gbpbank, eps, ideal, other.
          required: true
          schema:
            type: string
          example: paypal
        - name: amount
          in: query
          description: CryptoCurrency amount to sell.
          required: true
          schema:
            type: integer
          example: 0.3
        - name: country
          in: query
          description: Country of the user at the Alpha-2 standard (ISO3166).
          required: true
          schema:
            type: string
          example: FR
        - name: walletAddress
          in: query
          description: User's wallet address where he holds the cryptocurreny he wants to sell.
          required: true
          schema:
            type: string
          example: '0x000000000000000000000000000000'
      responses:
        '200':
          description: |
            ### Quote information about the the sell.
            - "from": cryptocurrency sold,
            - "to": fiat user expects to be paid in,
            - "paymentMethod: method used to pay the user,
            - "cryptoAmount": cryptocurrency amount to sell,
            - "fiatAmount": fiat amount the user expects to receive (after all fees have been substracted),
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderQuoteResponse'
              example:
                from: bitcoin
                to: EUR
                fiatAmount: 300
                cryptoAmount: 0.01
        '400':
          description: |
            Invalid value for: query parameter from,
            Invalid value for:query parameter to,
            Invalid value for: query parameter paymentMethod...
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
        default:
          description: Error sent by the provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
  /crypto-currencies:
    get:
      operationId: getCrypto-currencies
      responses:
        '200':
          description: |
            ### Available crypto currencies
            - "id" : your unique identifier of the currency
            - "type" : possible values : coin, token
            - "blockchain" : ledger's blockchain_name of the blockchain as listed in https://crypto-assets-service.api.ledger.com/v1/coins?output=blockchain_name,chain_id, for evm networks this field may be omitted when chainId is defined.
            - "chainId" : for EVMs only, chain id of the blockchain, 1 for ethereum, 137 for polygon... See https://chainlist.org/
            - "contract" : mapped only if type is token, the contract address of the token.
            blockchain OR chainId should be defined. If chainId is defined, blockchain field is ignored.
          x-summary: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CryptoCurrencies'
              example:
                - id: BTC
                  type: coin
                  blockchain: bitcoin
                - id: USDC
                  type: token
                  chainId: 1
                  contract: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48'
        default:
          description: Error sent by the provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
              example:
                code: 42
                message: Server isn't able to handle the request because of whatever.
  /fund:
    post:
      operationId: postFund
      description: |
        Generates a secure binary payload for the nano in order to authorize the transaction.
      requestBody:
        description: Info for generating payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FundRequest'
      responses:
        '200':
          description: Fund ID with flattened JWS. `https://www.rfc-editor.org/rfc/rfc7515#section-7.2.2`
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundResponse'
              example:
                userId: ID-165940
                payinAddress: '0xa0b86991c627e936c1d19d4a2e90a2ce3606eb48'
                createdAt: '2030-05-26T14:13:39'
                providerSig:
                  payload: CgUweGZmZhoFMHhmZmYqBTB4ZmZmOgNCVENCA0JBVEoIMTIwMDAwMDBSCDExNTAwMDAwWhF2ZXJ5IGxvbmd1ZSBub25jZQ==
                  payload_signature: MEUCIBRm4PrdgRw0aBwRepuOGGRmR/YPcCoyKNJ7UDjFO030AiEA/VT0anolum0a3X/9lGPeovZHqzeDG9brcUB4zhYmwbs=
        '400':
          description: Deposit wallet not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
              example:
                messageKey: NO_DEPOSIT_WALLET_ERROR
                message: Deposit wallet not available. (you can add any useful field as you want)
        '404':
          description: Not found error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderServerError'
              examples:
                CURRENCY_FROM_NOT_FOUND_ERROR:
                  summary: CURRENCY_FROM_NOT_FOUND_ERROR
                  value:
                    messageKey: CURRENCY_FROM_NOT_FOUND_ERROR
                    message: When the currency from is not found. (you can add any useful field as you want)
                CURRENCY_TO_NOT_FOUND_ERROR:
                  summary: CURRENCY_TO_NOT_FOUND_ERROR
                  value:
                    messageKey: CURRENCY_TO_NOT_FOUND_ERROR
                    message: When the currency to is not found. (you can add any useful field as you want)
                USER_ID_NOT_FOUND_ERROR:
                  summary: USER_ID_NOT_FOUND_ERROR
                  value:
                    messageKey: USER_ID_NOT_FOUND_ERROR
                    message: When the User's id is not found. (you can add any useful field as you want)
components:
  schemas:
    FundProviderCapabilities:
      type: object
      properties:
        fiatCurrencyCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/FiatCurrencyCapability'
        cryptoCurrencyCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/CryptoCurrencyCapability'
      description: |
        - "fiatCurrencyCapabilities.[].fiat": fiat currency supported at the ISO-4217 standard,
        - cryptoCurrencyCapabilities.[].id: The provider id of the currency, this id will be used to call quote endpoint and in the widget url query parameter,
        - cryptoCurrencyCapabilities.[].minAmount: Minimum amount of crypto the user can sell
        - cryptoCurrencyCapabilities.[].maxAmount: Maximum amount of crypto the user can sell
        - "countriesCapabilities.[].country": available at the Alpha-2 standard (ISO3166),
        - "countriesCapabilities.[].paymentMethods.[].name": Available payment method, valid values : visa, mastercard, creditcard, sepa, bank, other
    FundRequest:
      required:
        - userId
        - address
        - currency
        - payloadCurrency
        - nonce
      type: object
      properties:
        userId:
          type: string
          description: User Id in the provider system (linked to his account).
        address:
          type: string
          description: User's crypto address. For possibly fees computation in provider's side.
        currency:
          type: string
          description: Currency ID, using the provider's identifiers.
        nonce:
          type: string
          description: Value for the `device_transaction_id_ng` field in the protobuf payload, in hex format of the byte array nonce received by the user.
    FundResponse:
      required:
        - fundId
        - address
        - createdAt
        - providerSig
      type: object
      properties:
        fundId:
          type: string
          description: 'provider''s id of the ongoing fund transaction. This will be used by Ledger''s backend to retrieve the status of user swap transaction. A unique id must be generated each time this endpoint is called, even if called with a same quoteId : quoteId != swapId. This is a swap attempt id and several retries sharing the same quote id might be performed by a user.'
        address:
          type: string
          description: User's custodian address (managed by the Provider).
        createdAt:
          type: string
          description: Creation date of the swap payload in ISO-8601 format.
        providerSig:
          $ref: '#/components/schemas/ProviderSig'
    Coin:
      type: object
    CryptoCurrencies:
      required:
        - id
        - type
        - blockchain
        - chainId
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/CryptoCurrencyType'
        blockchain:
          type: string
        chainId:
          type: integer
          format: int32
        contract:
          type: string
    CryptoCurrencyCapability:
      required:
        - id
        - minAmount
        - maxAmount
      type: object
      properties:
        id:
          type: string
        minAmount:
          type: number
        maxAmount:
          type: number
    CryptoCurrencyType:
      oneOf:
        - $ref: '#/components/schemas/Coin'
        - $ref: '#/components/schemas/Token'
    FiatCurrencyCapability:
      required:
        - fiat
        - minAmount
        - maxAmount
      type: object
      properties:
        fiat:
          type: string
    ProviderQuoteResponse:
      required:
        - from
        - to
        - fiatAmount
        - cryptoAmount
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        fiatAmount:
          type: number
        cryptoAmount:
          type: number
    ProviderServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    ProviderSig:
      required:
        - payload
        - signature
      type: object
      properties:
        payload:
          type: string
          description: Protobuf payload (in binary format).
        signature:
          type: string
          description: Payload signed in JWS format.
    Token:
      type: object
